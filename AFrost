## makeCacheMatrix: creates a "matrix" object that can cache its inverse.
## cacheSolve: computes inverse of "matrix" returned by makeCacheMatrix. 
## If inverse has already been calculated (and the matrix has not changed),
## then cacheSolve should retrieve its inverse from the cache

## Creates a "matrix" object that caches its inverse

makeCacheMatrix <- function(x = matrix()) {
  i<-NULL
  set<-function(y) {
  x<<-y
  i<<-NULL
  }
  get<-function() x
  setinverse<-function(inverse) i <<- inverse
  getinverse<-function() i
  list(set=set, get=get,setinverse=setinverse,getinverse=getinverse)

}


## Computes inverse of "matrix" returned by makeCaceMatrix. If inverse
## has already been calculated then cacheSolve retrieves its inverse from cache

cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
        i<-x$getinverse()
        if(!is.null(i)) {
          message("getting cached data")
          return(i)
          }
          data<-x$get()
          i<-solve(data,...)
          x$setinverse(i)
          i
}
